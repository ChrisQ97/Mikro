;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 25/09/2018 09:25:02 a.m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF003EFBB  	GOTO        1910
_interrupt:
;MyProject.c,473 :: 		void interrupt()
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;MyProject.c,475 :: 		if (TMR0IF_bit == 1)                   // Si fue una interrupcion debida a TMR0
0x0010	0xA4F2      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0) 
0x0012	0xD00D      	BRA         L_interrupt151
;MyProject.c,477 :: 		TMR0ON_bit = 0;                    // Apagamos el timer de TMR0
0x0014	0x9ED5      	BCF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,478 :: 		TMR0IF_bit = 0;                    // Apagamos la bandera de interrupcion por Overflow de TMR0
0x0016	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;MyProject.c,479 :: 		externa = 1;
0x0018	0x0E01      	MOVLW       1
0x001A	0x6E19      	MOVWF       _externa 
0x001C	0x0E00      	MOVLW       0
0x001E	0x6E1A      	MOVWF       _externa+1 
;MyProject.c,480 :: 		TMR0L = 0xFF;                      // Reiniciamos el valor de TMR0
0x0020	0x0EFF      	MOVLW       255
0x0022	0x6ED6      	MOVWF       TMR0L 
;MyProject.c,482 :: 		ApagarLeds();
0x0024	0xDA1B      	RCALL       _ApagarLeds
;MyProject.c,483 :: 		proceso++;                         // Cambiamos de proceso
0x0026	0x4A1B      	INFSNZ      _proceso, 1 
0x0028	0x2A1C      	INCF        _proceso+1, 1 
;MyProject.c,485 :: 		TMR0ON_bit = 1;                    // Volvemos a encender el TMR0
0x002A	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,486 :: 		}
0x002C	0xD00A      	BRA         L_interrupt152
L_interrupt151:
;MyProject.c,487 :: 		else if (TMR1IF_bit == 1)              // Si fue una interrupcion debida a TMR1
0x002E	0xA09E      	BTFSS       TMR1IF_bit, BitPos(TMR1IF_bit+0) 
0x0030	0xD008      	BRA         L_interrupt153
;MyProject.c,489 :: 		TMR1ON_bit = 0;                     // Apagamos el timer de TMR1
0x0032	0x90CD      	BCF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,490 :: 		TMR1IF_bit = 0;                     // Apagamos la bandera de interrupcion por Overflow de TMR1
0x0034	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;MyProject.c,492 :: 		TMR1L = 0x00;
0x0036	0x6ACE      	CLRF        TMR1L 
;MyProject.c,493 :: 		TMR1H = 0x00;                       // Reiniciamos el valor de TMR1
0x0038	0x6ACF      	CLRF        TMR1H 
;MyProject.c,495 :: 		continuar = 1;                      // Permitimos que el programa se continue ejecutando
0x003A	0x0E01      	MOVLW       1
0x003C	0x6E1D      	MOVWF       _continuar 
0x003E	0x0E00      	MOVLW       0
0x0040	0x6E1E      	MOVWF       _continuar+1 
;MyProject.c,496 :: 		}
L_interrupt153:
L_interrupt152:
;MyProject.c,498 :: 		}
L_end_interrupt:
L__interrupt248:
0x0042	0xF000C016  	MOVFF       22, R0
0x0046	0xF001C015  	MOVFF       21, R1
0x004A	0x0011      	RETFIE      1
; end of _interrupt
_BasculacionConIncremento:
;MyProject.c,46 :: 		void BasculacionConIncremento()
;MyProject.c,48 :: 		externa = 0;
0x004C	0x6A19      	CLRF        _externa 
0x004E	0x6A1A      	CLRF        _externa+1 
;MyProject.c,49 :: 		repeticiones = 0;
0x0050	0x6A17      	CLRF        _repeticiones 
0x0052	0x6A18      	CLRF        _repeticiones+1 
;MyProject.c,50 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0054	0x6A17      	CLRF        _repeticiones 
0x0056	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento4:
0x0058	0x0E80      	MOVLW       128
0x005A	0x1818      	XORWF       _repeticiones+1, 0 
0x005C	0x6E00      	MOVWF       R0 
0x005E	0x0E80      	MOVLW       128
0x0060	0x5C00      	SUBWF       R0, 0 
0x0062	0xE102      	BNZ         L__BasculacionConIncremento163
0x0064	0x0E02      	MOVLW       2
0x0066	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento163:
0x0068	0xE21F      	BC          L_BasculacionConIncremento5
;MyProject.c,52 :: 		if(externa!=1){
0x006A	0x0E00      	MOVLW       0
0x006C	0x181A      	XORWF       _externa+1, 0 
0x006E	0xE102      	BNZ         L__BasculacionConIncremento164
0x0070	0x0E01      	MOVLW       1
0x0072	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento164:
0x0074	0xE016      	BZ          L_BasculacionConIncremento7
;MyProject.c,53 :: 		SPP0_bit = 1;                        // Encendemos el led
0x0076	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,55 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0078	0x6A1D      	CLRF        _continuar 
0x007A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,56 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x007C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,57 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento8:
0x007E	0x0E00      	MOVLW       0
0x0080	0x181E      	XORWF       _continuar+1, 0 
0x0082	0xE102      	BNZ         L__BasculacionConIncremento165
0x0084	0x0E00      	MOVLW       0
0x0086	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento165:
0x0088	0xE101      	BNZ         L_BasculacionConIncremento9
0x008A	0xD7F9      	BRA         L_BasculacionConIncremento8
L_BasculacionConIncremento9:
;MyProject.c,59 :: 		SPP0_bit = 0;                        // Apagamos el led
0x008C	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,61 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x008E	0x6A1D      	CLRF        _continuar 
0x0090	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,62 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0092	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,63 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento10:
0x0094	0x0E00      	MOVLW       0
0x0096	0x181E      	XORWF       _continuar+1, 0 
0x0098	0xE102      	BNZ         L__BasculacionConIncremento166
0x009A	0x0E00      	MOVLW       0
0x009C	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento166:
0x009E	0xE101      	BNZ         L_BasculacionConIncremento11
0x00A0	0xD7F9      	BRA         L_BasculacionConIncremento10
L_BasculacionConIncremento11:
;MyProject.c,64 :: 		}
L_BasculacionConIncremento7:
;MyProject.c,50 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x00A2	0x4A17      	INFSNZ      _repeticiones, 1 
0x00A4	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,65 :: 		}
0x00A6	0xD7D8      	BRA         L_BasculacionConIncremento4
L_BasculacionConIncremento5:
;MyProject.c,66 :: 		if(externa!=1){
0x00A8	0x0E00      	MOVLW       0
0x00AA	0x181A      	XORWF       _externa+1, 0 
0x00AC	0xE102      	BNZ         L__BasculacionConIncremento167
0x00AE	0x0E01      	MOVLW       1
0x00B0	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento167:
0x00B2	0xE00B      	BZ          L_BasculacionConIncremento12
;MyProject.c,67 :: 		SPP0_bit = 1;                             // Encendemos el led
0x00B4	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,68 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x00B6	0x6A1D      	CLRF        _continuar 
0x00B8	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,69 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x00BA	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,70 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento13:
0x00BC	0x0E00      	MOVLW       0
0x00BE	0x181E      	XORWF       _continuar+1, 0 
0x00C0	0xE102      	BNZ         L__BasculacionConIncremento168
0x00C2	0x0E00      	MOVLW       0
0x00C4	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento168:
0x00C6	0xE101      	BNZ         L_BasculacionConIncremento14
0x00C8	0xD7F9      	BRA         L_BasculacionConIncremento13
L_BasculacionConIncremento14:
;MyProject.c,71 :: 		}
L_BasculacionConIncremento12:
;MyProject.c,72 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x00CA	0x6A17      	CLRF        _repeticiones 
0x00CC	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento15:
0x00CE	0x0E80      	MOVLW       128
0x00D0	0x1818      	XORWF       _repeticiones+1, 0 
0x00D2	0x6E00      	MOVWF       R0 
0x00D4	0x0E80      	MOVLW       128
0x00D6	0x5C00      	SUBWF       R0, 0 
0x00D8	0xE102      	BNZ         L__BasculacionConIncremento169
0x00DA	0x0E02      	MOVLW       2
0x00DC	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento169:
0x00DE	0xE21F      	BC          L_BasculacionConIncremento16
;MyProject.c,74 :: 		if(externa != 1){
0x00E0	0x0E00      	MOVLW       0
0x00E2	0x181A      	XORWF       _externa+1, 0 
0x00E4	0xE102      	BNZ         L__BasculacionConIncremento170
0x00E6	0x0E01      	MOVLW       1
0x00E8	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento170:
0x00EA	0xE016      	BZ          L_BasculacionConIncremento18
;MyProject.c,75 :: 		SPP1_bit = 1;                        // Encendemos el led
0x00EC	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,77 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x00EE	0x6A1D      	CLRF        _continuar 
0x00F0	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,78 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x00F2	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,79 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento19:
0x00F4	0x0E00      	MOVLW       0
0x00F6	0x181E      	XORWF       _continuar+1, 0 
0x00F8	0xE102      	BNZ         L__BasculacionConIncremento171
0x00FA	0x0E00      	MOVLW       0
0x00FC	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento171:
0x00FE	0xE101      	BNZ         L_BasculacionConIncremento20
0x0100	0xD7F9      	BRA         L_BasculacionConIncremento19
L_BasculacionConIncremento20:
;MyProject.c,81 :: 		SPP1_bit = 0;                        // Apagamos el led
0x0102	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,83 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0104	0x6A1D      	CLRF        _continuar 
0x0106	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,84 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0108	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,85 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento21:
0x010A	0x0E00      	MOVLW       0
0x010C	0x181E      	XORWF       _continuar+1, 0 
0x010E	0xE102      	BNZ         L__BasculacionConIncremento172
0x0110	0x0E00      	MOVLW       0
0x0112	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento172:
0x0114	0xE101      	BNZ         L_BasculacionConIncremento22
0x0116	0xD7F9      	BRA         L_BasculacionConIncremento21
L_BasculacionConIncremento22:
;MyProject.c,86 :: 		}
L_BasculacionConIncremento18:
;MyProject.c,72 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0118	0x4A17      	INFSNZ      _repeticiones, 1 
0x011A	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,87 :: 		}
0x011C	0xD7D8      	BRA         L_BasculacionConIncremento15
L_BasculacionConIncremento16:
;MyProject.c,88 :: 		if(externa!=1){
0x011E	0x0E00      	MOVLW       0
0x0120	0x181A      	XORWF       _externa+1, 0 
0x0122	0xE102      	BNZ         L__BasculacionConIncremento173
0x0124	0x0E01      	MOVLW       1
0x0126	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento173:
0x0128	0xE00B      	BZ          L_BasculacionConIncremento23
;MyProject.c,89 :: 		SPP1_bit = 1;                             // Encendemos el led
0x012A	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,90 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x012C	0x6A1D      	CLRF        _continuar 
0x012E	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,91 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0130	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,92 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento24:
0x0132	0x0E00      	MOVLW       0
0x0134	0x181E      	XORWF       _continuar+1, 0 
0x0136	0xE102      	BNZ         L__BasculacionConIncremento174
0x0138	0x0E00      	MOVLW       0
0x013A	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento174:
0x013C	0xE101      	BNZ         L_BasculacionConIncremento25
0x013E	0xD7F9      	BRA         L_BasculacionConIncremento24
L_BasculacionConIncremento25:
;MyProject.c,93 :: 		}
L_BasculacionConIncremento23:
;MyProject.c,94 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0140	0x6A17      	CLRF        _repeticiones 
0x0142	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento26:
0x0144	0x0E80      	MOVLW       128
0x0146	0x1818      	XORWF       _repeticiones+1, 0 
0x0148	0x6E00      	MOVWF       R0 
0x014A	0x0E80      	MOVLW       128
0x014C	0x5C00      	SUBWF       R0, 0 
0x014E	0xE102      	BNZ         L__BasculacionConIncremento175
0x0150	0x0E02      	MOVLW       2
0x0152	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento175:
0x0154	0xE21F      	BC          L_BasculacionConIncremento27
;MyProject.c,96 :: 		if(externa != 1){
0x0156	0x0E00      	MOVLW       0
0x0158	0x181A      	XORWF       _externa+1, 0 
0x015A	0xE102      	BNZ         L__BasculacionConIncremento176
0x015C	0x0E01      	MOVLW       1
0x015E	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento176:
0x0160	0xE016      	BZ          L_BasculacionConIncremento29
;MyProject.c,97 :: 		SPP2_bit = 1;                        // Encendemos el led
0x0162	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,99 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0164	0x6A1D      	CLRF        _continuar 
0x0166	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,100 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0168	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,101 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento30:
0x016A	0x0E00      	MOVLW       0
0x016C	0x181E      	XORWF       _continuar+1, 0 
0x016E	0xE102      	BNZ         L__BasculacionConIncremento177
0x0170	0x0E00      	MOVLW       0
0x0172	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento177:
0x0174	0xE101      	BNZ         L_BasculacionConIncremento31
0x0176	0xD7F9      	BRA         L_BasculacionConIncremento30
L_BasculacionConIncremento31:
;MyProject.c,103 :: 		SPP2_bit = 0;                        // Apagamos el led
0x0178	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,105 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x017A	0x6A1D      	CLRF        _continuar 
0x017C	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,106 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x017E	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,107 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento32:
0x0180	0x0E00      	MOVLW       0
0x0182	0x181E      	XORWF       _continuar+1, 0 
0x0184	0xE102      	BNZ         L__BasculacionConIncremento178
0x0186	0x0E00      	MOVLW       0
0x0188	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento178:
0x018A	0xE101      	BNZ         L_BasculacionConIncremento33
0x018C	0xD7F9      	BRA         L_BasculacionConIncremento32
L_BasculacionConIncremento33:
;MyProject.c,108 :: 		}
L_BasculacionConIncremento29:
;MyProject.c,94 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x018E	0x4A17      	INFSNZ      _repeticiones, 1 
0x0190	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,109 :: 		}
0x0192	0xD7D8      	BRA         L_BasculacionConIncremento26
L_BasculacionConIncremento27:
;MyProject.c,110 :: 		if(externa!=1){
0x0194	0x0E00      	MOVLW       0
0x0196	0x181A      	XORWF       _externa+1, 0 
0x0198	0xE102      	BNZ         L__BasculacionConIncremento179
0x019A	0x0E01      	MOVLW       1
0x019C	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento179:
0x019E	0xE00B      	BZ          L_BasculacionConIncremento34
;MyProject.c,111 :: 		SPP2_bit = 1;                             // Encendemos el led
0x01A0	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,112 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x01A2	0x6A1D      	CLRF        _continuar 
0x01A4	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,113 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x01A6	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,114 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento35:
0x01A8	0x0E00      	MOVLW       0
0x01AA	0x181E      	XORWF       _continuar+1, 0 
0x01AC	0xE102      	BNZ         L__BasculacionConIncremento180
0x01AE	0x0E00      	MOVLW       0
0x01B0	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento180:
0x01B2	0xE101      	BNZ         L_BasculacionConIncremento36
0x01B4	0xD7F9      	BRA         L_BasculacionConIncremento35
L_BasculacionConIncremento36:
;MyProject.c,115 :: 		}
L_BasculacionConIncremento34:
;MyProject.c,116 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x01B6	0x6A17      	CLRF        _repeticiones 
0x01B8	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento37:
0x01BA	0x0E80      	MOVLW       128
0x01BC	0x1818      	XORWF       _repeticiones+1, 0 
0x01BE	0x6E00      	MOVWF       R0 
0x01C0	0x0E80      	MOVLW       128
0x01C2	0x5C00      	SUBWF       R0, 0 
0x01C4	0xE102      	BNZ         L__BasculacionConIncremento181
0x01C6	0x0E02      	MOVLW       2
0x01C8	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento181:
0x01CA	0xE21F      	BC          L_BasculacionConIncremento38
;MyProject.c,118 :: 		if(externa != 1){
0x01CC	0x0E00      	MOVLW       0
0x01CE	0x181A      	XORWF       _externa+1, 0 
0x01D0	0xE102      	BNZ         L__BasculacionConIncremento182
0x01D2	0x0E01      	MOVLW       1
0x01D4	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento182:
0x01D6	0xE016      	BZ          L_BasculacionConIncremento40
;MyProject.c,119 :: 		SPP3_bit = 1;                        // Encendemos el led
0x01D8	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,121 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x01DA	0x6A1D      	CLRF        _continuar 
0x01DC	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,122 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x01DE	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,123 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento41:
0x01E0	0x0E00      	MOVLW       0
0x01E2	0x181E      	XORWF       _continuar+1, 0 
0x01E4	0xE102      	BNZ         L__BasculacionConIncremento183
0x01E6	0x0E00      	MOVLW       0
0x01E8	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento183:
0x01EA	0xE101      	BNZ         L_BasculacionConIncremento42
0x01EC	0xD7F9      	BRA         L_BasculacionConIncremento41
L_BasculacionConIncremento42:
;MyProject.c,125 :: 		SPP3_bit = 0;                        // Apagamos el led
0x01EE	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,127 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x01F0	0x6A1D      	CLRF        _continuar 
0x01F2	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,128 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x01F4	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,129 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento43:
0x01F6	0x0E00      	MOVLW       0
0x01F8	0x181E      	XORWF       _continuar+1, 0 
0x01FA	0xE102      	BNZ         L__BasculacionConIncremento184
0x01FC	0x0E00      	MOVLW       0
0x01FE	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento184:
0x0200	0xE101      	BNZ         L_BasculacionConIncremento44
0x0202	0xD7F9      	BRA         L_BasculacionConIncremento43
L_BasculacionConIncremento44:
;MyProject.c,130 :: 		}
L_BasculacionConIncremento40:
;MyProject.c,116 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0204	0x4A17      	INFSNZ      _repeticiones, 1 
0x0206	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,131 :: 		}
0x0208	0xD7D8      	BRA         L_BasculacionConIncremento37
L_BasculacionConIncremento38:
;MyProject.c,132 :: 		if(externa!=1)
0x020A	0x0E00      	MOVLW       0
0x020C	0x181A      	XORWF       _externa+1, 0 
0x020E	0xE102      	BNZ         L__BasculacionConIncremento185
0x0210	0x0E01      	MOVLW       1
0x0212	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento185:
0x0214	0xE00B      	BZ          L_BasculacionConIncremento45
;MyProject.c,134 :: 		SPP3_bit = 1;                             // Encendemos el led
0x0216	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,135 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x0218	0x6A1D      	CLRF        _continuar 
0x021A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,136 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x021C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,137 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento46:
0x021E	0x0E00      	MOVLW       0
0x0220	0x181E      	XORWF       _continuar+1, 0 
0x0222	0xE102      	BNZ         L__BasculacionConIncremento186
0x0224	0x0E00      	MOVLW       0
0x0226	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento186:
0x0228	0xE101      	BNZ         L_BasculacionConIncremento47
0x022A	0xD7F9      	BRA         L_BasculacionConIncremento46
L_BasculacionConIncremento47:
;MyProject.c,138 :: 		}
L_BasculacionConIncremento45:
;MyProject.c,140 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x022C	0x6A17      	CLRF        _repeticiones 
0x022E	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento48:
0x0230	0x0E80      	MOVLW       128
0x0232	0x1818      	XORWF       _repeticiones+1, 0 
0x0234	0x6E00      	MOVWF       R0 
0x0236	0x0E80      	MOVLW       128
0x0238	0x5C00      	SUBWF       R0, 0 
0x023A	0xE102      	BNZ         L__BasculacionConIncremento187
0x023C	0x0E02      	MOVLW       2
0x023E	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento187:
0x0240	0xE21F      	BC          L_BasculacionConIncremento49
;MyProject.c,142 :: 		if(externa!=1){
0x0242	0x0E00      	MOVLW       0
0x0244	0x181A      	XORWF       _externa+1, 0 
0x0246	0xE102      	BNZ         L__BasculacionConIncremento188
0x0248	0x0E01      	MOVLW       1
0x024A	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento188:
0x024C	0xE016      	BZ          L_BasculacionConIncremento51
;MyProject.c,143 :: 		SPP4_bit = 1;                        // Encendemos el led
0x024E	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,145 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0250	0x6A1D      	CLRF        _continuar 
0x0252	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,146 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0254	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,147 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento52:
0x0256	0x0E00      	MOVLW       0
0x0258	0x181E      	XORWF       _continuar+1, 0 
0x025A	0xE102      	BNZ         L__BasculacionConIncremento189
0x025C	0x0E00      	MOVLW       0
0x025E	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento189:
0x0260	0xE101      	BNZ         L_BasculacionConIncremento53
0x0262	0xD7F9      	BRA         L_BasculacionConIncremento52
L_BasculacionConIncremento53:
;MyProject.c,149 :: 		SPP4_bit = 0;                        // Apagamos el led
0x0264	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,151 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0266	0x6A1D      	CLRF        _continuar 
0x0268	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,152 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x026A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,153 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento54:
0x026C	0x0E00      	MOVLW       0
0x026E	0x181E      	XORWF       _continuar+1, 0 
0x0270	0xE102      	BNZ         L__BasculacionConIncremento190
0x0272	0x0E00      	MOVLW       0
0x0274	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento190:
0x0276	0xE101      	BNZ         L_BasculacionConIncremento55
0x0278	0xD7F9      	BRA         L_BasculacionConIncremento54
L_BasculacionConIncremento55:
;MyProject.c,154 :: 		}
L_BasculacionConIncremento51:
;MyProject.c,140 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x027A	0x4A17      	INFSNZ      _repeticiones, 1 
0x027C	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,155 :: 		}
0x027E	0xD7D8      	BRA         L_BasculacionConIncremento48
L_BasculacionConIncremento49:
;MyProject.c,156 :: 		if(externa!=1){
0x0280	0x0E00      	MOVLW       0
0x0282	0x181A      	XORWF       _externa+1, 0 
0x0284	0xE102      	BNZ         L__BasculacionConIncremento191
0x0286	0x0E01      	MOVLW       1
0x0288	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento191:
0x028A	0xE00B      	BZ          L_BasculacionConIncremento56
;MyProject.c,157 :: 		SPP4_bit = 1;                             // Encendemos el led
0x028C	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,158 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x028E	0x6A1D      	CLRF        _continuar 
0x0290	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,159 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0292	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,160 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento57:
0x0294	0x0E00      	MOVLW       0
0x0296	0x181E      	XORWF       _continuar+1, 0 
0x0298	0xE102      	BNZ         L__BasculacionConIncremento192
0x029A	0x0E00      	MOVLW       0
0x029C	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento192:
0x029E	0xE101      	BNZ         L_BasculacionConIncremento58
0x02A0	0xD7F9      	BRA         L_BasculacionConIncremento57
L_BasculacionConIncremento58:
;MyProject.c,161 :: 		}
L_BasculacionConIncremento56:
;MyProject.c,162 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x02A2	0x6A17      	CLRF        _repeticiones 
0x02A4	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento59:
0x02A6	0x0E80      	MOVLW       128
0x02A8	0x1818      	XORWF       _repeticiones+1, 0 
0x02AA	0x6E00      	MOVWF       R0 
0x02AC	0x0E80      	MOVLW       128
0x02AE	0x5C00      	SUBWF       R0, 0 
0x02B0	0xE102      	BNZ         L__BasculacionConIncremento193
0x02B2	0x0E02      	MOVLW       2
0x02B4	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento193:
0x02B6	0xE21F      	BC          L_BasculacionConIncremento60
;MyProject.c,164 :: 		if(externa!=1){
0x02B8	0x0E00      	MOVLW       0
0x02BA	0x181A      	XORWF       _externa+1, 0 
0x02BC	0xE102      	BNZ         L__BasculacionConIncremento194
0x02BE	0x0E01      	MOVLW       1
0x02C0	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento194:
0x02C2	0xE016      	BZ          L_BasculacionConIncremento62
;MyProject.c,165 :: 		SPP5_bit = 1;                        // Encendemos el led
0x02C4	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,167 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x02C6	0x6A1D      	CLRF        _continuar 
0x02C8	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,168 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x02CA	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,169 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento63:
0x02CC	0x0E00      	MOVLW       0
0x02CE	0x181E      	XORWF       _continuar+1, 0 
0x02D0	0xE102      	BNZ         L__BasculacionConIncremento195
0x02D2	0x0E00      	MOVLW       0
0x02D4	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento195:
0x02D6	0xE101      	BNZ         L_BasculacionConIncremento64
0x02D8	0xD7F9      	BRA         L_BasculacionConIncremento63
L_BasculacionConIncremento64:
;MyProject.c,171 :: 		SPP5_bit = 0;                        // Apagamos el led
0x02DA	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,173 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x02DC	0x6A1D      	CLRF        _continuar 
0x02DE	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,174 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x02E0	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,175 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento65:
0x02E2	0x0E00      	MOVLW       0
0x02E4	0x181E      	XORWF       _continuar+1, 0 
0x02E6	0xE102      	BNZ         L__BasculacionConIncremento196
0x02E8	0x0E00      	MOVLW       0
0x02EA	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento196:
0x02EC	0xE101      	BNZ         L_BasculacionConIncremento66
0x02EE	0xD7F9      	BRA         L_BasculacionConIncremento65
L_BasculacionConIncremento66:
;MyProject.c,176 :: 		}
L_BasculacionConIncremento62:
;MyProject.c,162 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x02F0	0x4A17      	INFSNZ      _repeticiones, 1 
0x02F2	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,177 :: 		}
0x02F4	0xD7D8      	BRA         L_BasculacionConIncremento59
L_BasculacionConIncremento60:
;MyProject.c,178 :: 		if(externa!=1){
0x02F6	0x0E00      	MOVLW       0
0x02F8	0x181A      	XORWF       _externa+1, 0 
0x02FA	0xE102      	BNZ         L__BasculacionConIncremento197
0x02FC	0x0E01      	MOVLW       1
0x02FE	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento197:
0x0300	0xE00B      	BZ          L_BasculacionConIncremento67
;MyProject.c,179 :: 		SPP5_bit = 1;                             // Encendemos el led
0x0302	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,180 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x0304	0x6A1D      	CLRF        _continuar 
0x0306	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,181 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0308	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,182 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento68:
0x030A	0x0E00      	MOVLW       0
0x030C	0x181E      	XORWF       _continuar+1, 0 
0x030E	0xE102      	BNZ         L__BasculacionConIncremento198
0x0310	0x0E00      	MOVLW       0
0x0312	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento198:
0x0314	0xE101      	BNZ         L_BasculacionConIncremento69
0x0316	0xD7F9      	BRA         L_BasculacionConIncremento68
L_BasculacionConIncremento69:
;MyProject.c,183 :: 		}
L_BasculacionConIncremento67:
;MyProject.c,185 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0318	0x6A17      	CLRF        _repeticiones 
0x031A	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento70:
0x031C	0x0E80      	MOVLW       128
0x031E	0x1818      	XORWF       _repeticiones+1, 0 
0x0320	0x6E00      	MOVWF       R0 
0x0322	0x0E80      	MOVLW       128
0x0324	0x5C00      	SUBWF       R0, 0 
0x0326	0xE102      	BNZ         L__BasculacionConIncremento199
0x0328	0x0E02      	MOVLW       2
0x032A	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento199:
0x032C	0xE21F      	BC          L_BasculacionConIncremento71
;MyProject.c,187 :: 		if(externa!=1){
0x032E	0x0E00      	MOVLW       0
0x0330	0x181A      	XORWF       _externa+1, 0 
0x0332	0xE102      	BNZ         L__BasculacionConIncremento200
0x0334	0x0E01      	MOVLW       1
0x0336	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento200:
0x0338	0xE016      	BZ          L_BasculacionConIncremento73
;MyProject.c,188 :: 		SPP6_bit = 1;                        // Encendemos el led
0x033A	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,190 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x033C	0x6A1D      	CLRF        _continuar 
0x033E	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,191 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0340	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,192 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento74:
0x0342	0x0E00      	MOVLW       0
0x0344	0x181E      	XORWF       _continuar+1, 0 
0x0346	0xE102      	BNZ         L__BasculacionConIncremento201
0x0348	0x0E00      	MOVLW       0
0x034A	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento201:
0x034C	0xE101      	BNZ         L_BasculacionConIncremento75
0x034E	0xD7F9      	BRA         L_BasculacionConIncremento74
L_BasculacionConIncremento75:
;MyProject.c,194 :: 		SPP6_bit = 0;                        // Apagamos el led
0x0350	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,196 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0352	0x6A1D      	CLRF        _continuar 
0x0354	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,197 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0356	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,198 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento76:
0x0358	0x0E00      	MOVLW       0
0x035A	0x181E      	XORWF       _continuar+1, 0 
0x035C	0xE102      	BNZ         L__BasculacionConIncremento202
0x035E	0x0E00      	MOVLW       0
0x0360	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento202:
0x0362	0xE101      	BNZ         L_BasculacionConIncremento77
0x0364	0xD7F9      	BRA         L_BasculacionConIncremento76
L_BasculacionConIncremento77:
;MyProject.c,199 :: 		}
L_BasculacionConIncremento73:
;MyProject.c,185 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0366	0x4A17      	INFSNZ      _repeticiones, 1 
0x0368	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,200 :: 		}
0x036A	0xD7D8      	BRA         L_BasculacionConIncremento70
L_BasculacionConIncremento71:
;MyProject.c,201 :: 		if(externa!=1){
0x036C	0x0E00      	MOVLW       0
0x036E	0x181A      	XORWF       _externa+1, 0 
0x0370	0xE102      	BNZ         L__BasculacionConIncremento203
0x0372	0x0E01      	MOVLW       1
0x0374	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento203:
0x0376	0xE00B      	BZ          L_BasculacionConIncremento78
;MyProject.c,202 :: 		SPP6_bit = 1;                             // Encendemos el led
0x0378	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,203 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x037A	0x6A1D      	CLRF        _continuar 
0x037C	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,204 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x037E	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,205 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento79:
0x0380	0x0E00      	MOVLW       0
0x0382	0x181E      	XORWF       _continuar+1, 0 
0x0384	0xE102      	BNZ         L__BasculacionConIncremento204
0x0386	0x0E00      	MOVLW       0
0x0388	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento204:
0x038A	0xE101      	BNZ         L_BasculacionConIncremento80
0x038C	0xD7F9      	BRA         L_BasculacionConIncremento79
L_BasculacionConIncremento80:
;MyProject.c,206 :: 		}
L_BasculacionConIncremento78:
;MyProject.c,208 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x038E	0x6A17      	CLRF        _repeticiones 
0x0390	0x6A18      	CLRF        _repeticiones+1 
L_BasculacionConIncremento81:
0x0392	0x0E80      	MOVLW       128
0x0394	0x1818      	XORWF       _repeticiones+1, 0 
0x0396	0x6E00      	MOVWF       R0 
0x0398	0x0E80      	MOVLW       128
0x039A	0x5C00      	SUBWF       R0, 0 
0x039C	0xE102      	BNZ         L__BasculacionConIncremento205
0x039E	0x0E02      	MOVLW       2
0x03A0	0x5C17      	SUBWF       _repeticiones, 0 
L__BasculacionConIncremento205:
0x03A2	0xE21F      	BC          L_BasculacionConIncremento82
;MyProject.c,210 :: 		if(externa!=1){
0x03A4	0x0E00      	MOVLW       0
0x03A6	0x181A      	XORWF       _externa+1, 0 
0x03A8	0xE102      	BNZ         L__BasculacionConIncremento206
0x03AA	0x0E01      	MOVLW       1
0x03AC	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento206:
0x03AE	0xE016      	BZ          L_BasculacionConIncremento84
;MyProject.c,211 :: 		SPP7_bit = 1;                        // Encendemos el led
0x03B0	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,213 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x03B2	0x6A1D      	CLRF        _continuar 
0x03B4	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,214 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x03B6	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,215 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento85:
0x03B8	0x0E00      	MOVLW       0
0x03BA	0x181E      	XORWF       _continuar+1, 0 
0x03BC	0xE102      	BNZ         L__BasculacionConIncremento207
0x03BE	0x0E00      	MOVLW       0
0x03C0	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento207:
0x03C2	0xE101      	BNZ         L_BasculacionConIncremento86
0x03C4	0xD7F9      	BRA         L_BasculacionConIncremento85
L_BasculacionConIncremento86:
;MyProject.c,217 :: 		SPP7_bit = 0;                        // Apagamos el led
0x03C6	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,219 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x03C8	0x6A1D      	CLRF        _continuar 
0x03CA	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,220 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x03CC	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,221 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento87:
0x03CE	0x0E00      	MOVLW       0
0x03D0	0x181E      	XORWF       _continuar+1, 0 
0x03D2	0xE102      	BNZ         L__BasculacionConIncremento208
0x03D4	0x0E00      	MOVLW       0
0x03D6	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento208:
0x03D8	0xE101      	BNZ         L_BasculacionConIncremento88
0x03DA	0xD7F9      	BRA         L_BasculacionConIncremento87
L_BasculacionConIncremento88:
;MyProject.c,222 :: 		}
L_BasculacionConIncremento84:
;MyProject.c,208 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x03DC	0x4A17      	INFSNZ      _repeticiones, 1 
0x03DE	0x2A18      	INCF        _repeticiones+1, 1 
;MyProject.c,223 :: 		}
0x03E0	0xD7D8      	BRA         L_BasculacionConIncremento81
L_BasculacionConIncremento82:
;MyProject.c,224 :: 		if(externa!=1)
0x03E2	0x0E00      	MOVLW       0
0x03E4	0x181A      	XORWF       _externa+1, 0 
0x03E6	0xE102      	BNZ         L__BasculacionConIncremento209
0x03E8	0x0E01      	MOVLW       1
0x03EA	0x1819      	XORWF       _externa, 0 
L__BasculacionConIncremento209:
0x03EC	0xE00B      	BZ          L_BasculacionConIncremento89
;MyProject.c,226 :: 		SPP7_bit = 1;                             // Encendemos el led
0x03EE	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,227 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x03F0	0x6A1D      	CLRF        _continuar 
0x03F2	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,228 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x03F4	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,229 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento90:
0x03F6	0x0E00      	MOVLW       0
0x03F8	0x181E      	XORWF       _continuar+1, 0 
0x03FA	0xE102      	BNZ         L__BasculacionConIncremento210
0x03FC	0x0E00      	MOVLW       0
0x03FE	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento210:
0x0400	0xE101      	BNZ         L_BasculacionConIncremento91
0x0402	0xD7F9      	BRA         L_BasculacionConIncremento90
L_BasculacionConIncremento91:
;MyProject.c,230 :: 		}
L_BasculacionConIncremento89:
;MyProject.c,233 :: 		SPP0_bit = 0;
0x0404	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,234 :: 		SPP1_bit = 0;
0x0406	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,235 :: 		SPP2_bit = 0;
0x0408	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,236 :: 		SPP3_bit = 0;
0x040A	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,237 :: 		SPP4_bit = 0;
0x040C	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,238 :: 		SPP5_bit = 0;
0x040E	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,239 :: 		SPP6_bit = 0;
0x0410	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,240 :: 		SPP7_bit = 0;
0x0412	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,243 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x0414	0x6A1D      	CLRF        _continuar 
0x0416	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,244 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0418	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,245 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento92:
0x041A	0x0E00      	MOVLW       0
0x041C	0x181E      	XORWF       _continuar+1, 0 
0x041E	0xE102      	BNZ         L__BasculacionConIncremento211
0x0420	0x0E00      	MOVLW       0
0x0422	0x181D      	XORWF       _continuar, 0 
L__BasculacionConIncremento211:
0x0424	0xE101      	BNZ         L_BasculacionConIncremento93
0x0426	0xD7F9      	BRA         L_BasculacionConIncremento92
L_BasculacionConIncremento93:
;MyProject.c,246 :: 		}
L_end_BasculacionConIncremento:
0x0428	0x0012      	RETURN      0
; end of _BasculacionConIncremento
_EncenderApagar:
;MyProject.c,33 :: 		EncenderApagar()
;MyProject.c,35 :: 		externa = 0;
0x042A	0x6A19      	CLRF        _externa 
0x042C	0x6A1A      	CLRF        _externa+1 
;MyProject.c,36 :: 		continuar = 0;                       // Inicializamos la variable continuar
0x042E	0x6A1D      	CLRF        _continuar 
0x0430	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,37 :: 		RD0_bit = 1;                         // Encendemos el led
0x0432	0x8083      	BSF         RD0_bit, BitPos(RD0_bit+0) 
;MyProject.c,38 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0434	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,39 :: 		while (continuar == 0);              // Esperamos el retraso de 1 segundo
L_EncenderApagar0:
0x0436	0x0E00      	MOVLW       0
0x0438	0x181E      	XORWF       _continuar+1, 0 
0x043A	0xE102      	BNZ         L__EncenderApagar160
0x043C	0x0E00      	MOVLW       0
0x043E	0x181D      	XORWF       _continuar, 0 
L__EncenderApagar160:
0x0440	0xE101      	BNZ         L_EncenderApagar1
0x0442	0xD7F9      	BRA         L_EncenderApagar0
L_EncenderApagar1:
;MyProject.c,40 :: 		RD0_bit = 0;                         // Apagamos el led
0x0444	0x9083      	BCF         RD0_bit, BitPos(RD0_bit+0) 
;MyProject.c,41 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0446	0x6A1D      	CLRF        _continuar 
0x0448	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,42 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x044A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,43 :: 		while (continuar == 0);              // Esperamos el retraso de 1 segundo
L_EncenderApagar2:
0x044C	0x0E00      	MOVLW       0
0x044E	0x181E      	XORWF       _continuar+1, 0 
0x0450	0xE102      	BNZ         L__EncenderApagar161
0x0452	0x0E00      	MOVLW       0
0x0454	0x181D      	XORWF       _continuar, 0 
L__EncenderApagar161:
0x0456	0xE101      	BNZ         L_EncenderApagar3
0x0458	0xD7F9      	BRA         L_EncenderApagar2
L_EncenderApagar3:
;MyProject.c,44 :: 		}
L_end_EncenderApagar:
0x045A	0x0012      	RETURN      0
; end of _EncenderApagar
_ApagarLeds:
;MyProject.c,425 :: 		ApagarLeds()
;MyProject.c,427 :: 		SPP0_bit = 0;
0x045C	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,428 :: 		SPP1_bit = 0;
0x045E	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,429 :: 		SPP2_bit = 0;
0x0460	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,430 :: 		SPP3_bit = 0;
0x0462	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,431 :: 		SPP4_bit = 0;
0x0464	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,432 :: 		SPP5_bit = 0;
0x0466	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,433 :: 		SPP6_bit = 0;
0x0468	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,434 :: 		SPP7_bit = 0;
0x046A	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,435 :: 		}
L_end_ApagarLeds:
0x046C	0x0012      	RETURN      0
; end of _ApagarLeds
_CorrimientoImparRegresoPar:
;MyProject.c,365 :: 		void CorrimientoImparRegresoPar()
;MyProject.c,367 :: 		SPP0_bit = 1;                        // Encendemos el led
0x046E	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,369 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x0470	0x6A1D      	CLRF        _continuar 
0x0472	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,370 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0474	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,371 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar127:
0x0476	0x0E00      	MOVLW       0
0x0478	0x181E      	XORWF       _continuar+1, 0 
0x047A	0xE102      	BNZ         L__CorrimientoImparRegresoPar231
0x047C	0x0E00      	MOVLW       0
0x047E	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar231:
0x0480	0xE101      	BNZ         L_CorrimientoImparRegresoPar128
0x0482	0xD7F9      	BRA         L_CorrimientoImparRegresoPar127
L_CorrimientoImparRegresoPar128:
;MyProject.c,373 :: 		SPP0_bit = 0;                        // Apagamos el led
0x0484	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,374 :: 		SPP2_bit = 1;                        // Encendemos el led
0x0486	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,376 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x0488	0x6A1D      	CLRF        _continuar 
0x048A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,377 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x048C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,378 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar129:
0x048E	0x0E00      	MOVLW       0
0x0490	0x181E      	XORWF       _continuar+1, 0 
0x0492	0xE102      	BNZ         L__CorrimientoImparRegresoPar232
0x0494	0x0E00      	MOVLW       0
0x0496	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar232:
0x0498	0xE101      	BNZ         L_CorrimientoImparRegresoPar130
0x049A	0xD7F9      	BRA         L_CorrimientoImparRegresoPar129
L_CorrimientoImparRegresoPar130:
;MyProject.c,380 :: 		SPP2_bit = 0;                        // Apagamos el led
0x049C	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,381 :: 		SPP4_bit = 1;                        // Encendemos el led
0x049E	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,383 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x04A0	0x6A1D      	CLRF        _continuar 
0x04A2	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,384 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x04A4	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,385 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar131:
0x04A6	0x0E00      	MOVLW       0
0x04A8	0x181E      	XORWF       _continuar+1, 0 
0x04AA	0xE102      	BNZ         L__CorrimientoImparRegresoPar233
0x04AC	0x0E00      	MOVLW       0
0x04AE	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar233:
0x04B0	0xE101      	BNZ         L_CorrimientoImparRegresoPar132
0x04B2	0xD7F9      	BRA         L_CorrimientoImparRegresoPar131
L_CorrimientoImparRegresoPar132:
;MyProject.c,387 :: 		SPP4_bit = 0;                        // Apagamos el led
0x04B4	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,388 :: 		SPP6_bit = 1;                        // Encendemos el led
0x04B6	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,390 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x04B8	0x6A1D      	CLRF        _continuar 
0x04BA	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,391 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x04BC	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,392 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar133:
0x04BE	0x0E00      	MOVLW       0
0x04C0	0x181E      	XORWF       _continuar+1, 0 
0x04C2	0xE102      	BNZ         L__CorrimientoImparRegresoPar234
0x04C4	0x0E00      	MOVLW       0
0x04C6	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar234:
0x04C8	0xE101      	BNZ         L_CorrimientoImparRegresoPar134
0x04CA	0xD7F9      	BRA         L_CorrimientoImparRegresoPar133
L_CorrimientoImparRegresoPar134:
;MyProject.c,394 :: 		SPP6_bit = 0;                        // Apagamos el led
0x04CC	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,395 :: 		SPP7_bit = 1;                        // Encendemos el led
0x04CE	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,397 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x04D0	0x6A1D      	CLRF        _continuar 
0x04D2	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,398 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x04D4	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,399 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar135:
0x04D6	0x0E00      	MOVLW       0
0x04D8	0x181E      	XORWF       _continuar+1, 0 
0x04DA	0xE102      	BNZ         L__CorrimientoImparRegresoPar235
0x04DC	0x0E00      	MOVLW       0
0x04DE	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar235:
0x04E0	0xE101      	BNZ         L_CorrimientoImparRegresoPar136
0x04E2	0xD7F9      	BRA         L_CorrimientoImparRegresoPar135
L_CorrimientoImparRegresoPar136:
;MyProject.c,401 :: 		SPP7_bit = 0;                        // Apagamos el led
0x04E4	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,402 :: 		SPP5_bit = 1;                        // Encendemos el led
0x04E6	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,404 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x04E8	0x6A1D      	CLRF        _continuar 
0x04EA	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,405 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x04EC	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,406 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar137:
0x04EE	0x0E00      	MOVLW       0
0x04F0	0x181E      	XORWF       _continuar+1, 0 
0x04F2	0xE102      	BNZ         L__CorrimientoImparRegresoPar236
0x04F4	0x0E00      	MOVLW       0
0x04F6	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar236:
0x04F8	0xE101      	BNZ         L_CorrimientoImparRegresoPar138
0x04FA	0xD7F9      	BRA         L_CorrimientoImparRegresoPar137
L_CorrimientoImparRegresoPar138:
;MyProject.c,408 :: 		SPP5_bit = 0;                        // Apagamos el led
0x04FC	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,409 :: 		SPP3_bit = 1;                        // Encendemos el led
0x04FE	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,411 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x0500	0x6A1D      	CLRF        _continuar 
0x0502	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,412 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0504	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,413 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar139:
0x0506	0x0E00      	MOVLW       0
0x0508	0x181E      	XORWF       _continuar+1, 0 
0x050A	0xE102      	BNZ         L__CorrimientoImparRegresoPar237
0x050C	0x0E00      	MOVLW       0
0x050E	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar237:
0x0510	0xE101      	BNZ         L_CorrimientoImparRegresoPar140
0x0512	0xD7F9      	BRA         L_CorrimientoImparRegresoPar139
L_CorrimientoImparRegresoPar140:
;MyProject.c,415 :: 		SPP3_bit = 0;                        // Apagamos el led
0x0514	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,416 :: 		SPP1_bit = 1;                        // Encendemos el led
0x0516	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,418 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x0518	0x6A1D      	CLRF        _continuar 
0x051A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,419 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x051C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,420 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar141:
0x051E	0x0E00      	MOVLW       0
0x0520	0x181E      	XORWF       _continuar+1, 0 
0x0522	0xE102      	BNZ         L__CorrimientoImparRegresoPar238
0x0524	0x0E00      	MOVLW       0
0x0526	0x181D      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar238:
0x0528	0xE101      	BNZ         L_CorrimientoImparRegresoPar142
0x052A	0xD7F9      	BRA         L_CorrimientoImparRegresoPar141
L_CorrimientoImparRegresoPar142:
;MyProject.c,422 :: 		SPP1_bit = 0;                        // Apagamos el led
0x052C	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,423 :: 		}
L_end_CorrimientoImparRegresoPar:
0x052E	0x0012      	RETURN      0
; end of _CorrimientoImparRegresoPar
_ContadorAutomaticoHasta20:
;MyProject.c,353 :: 		void ContadorAutomaticoHasta20()
;MyProject.c,356 :: 		for (numero = 1; numero <= 20; numero++)
0x0530	0x0E01      	MOVLW       1
0x0532	0x6E01      	MOVWF       R1 
0x0534	0x0E00      	MOVLW       0
0x0536	0x6E02      	MOVWF       R2 
L_ContadorAutomaticoHasta20122:
0x0538	0x0E80      	MOVLW       128
0x053A	0x6E00      	MOVWF       R0 
0x053C	0x0E80      	MOVLW       128
0x053E	0x1802      	XORWF       R2, 0 
0x0540	0x5C00      	SUBWF       R0, 0 
0x0542	0xE102      	BNZ         L__ContadorAutomaticoHasta20228
0x0544	0x5001      	MOVF        R1, 0 
0x0546	0x0814      	SUBLW       20
L__ContadorAutomaticoHasta20228:
0x0548	0xE30F      	BNC         L_ContadorAutomaticoHasta20123
;MyProject.c,358 :: 		PORTD = numero;
0x054A	0xFF83C001  	MOVFF       R1, PORTD
;MyProject.c,359 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x054E	0x6A1D      	CLRF        _continuar 
0x0550	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,360 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0552	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,361 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_ContadorAutomaticoHasta20125:
0x0554	0x0E00      	MOVLW       0
0x0556	0x181E      	XORWF       _continuar+1, 0 
0x0558	0xE102      	BNZ         L__ContadorAutomaticoHasta20229
0x055A	0x0E00      	MOVLW       0
0x055C	0x181D      	XORWF       _continuar, 0 
L__ContadorAutomaticoHasta20229:
0x055E	0xE101      	BNZ         L_ContadorAutomaticoHasta20126
0x0560	0xD7F9      	BRA         L_ContadorAutomaticoHasta20125
L_ContadorAutomaticoHasta20126:
;MyProject.c,356 :: 		for (numero = 1; numero <= 20; numero++)
0x0562	0x4A01      	INFSNZ      R1, 1 
0x0564	0x2A02      	INCF        R2, 1 
;MyProject.c,362 :: 		}
0x0566	0xD7E8      	BRA         L_ContadorAutomaticoHasta20122
L_ContadorAutomaticoHasta20123:
;MyProject.c,363 :: 		}
L_end_ContadorAutomaticoHasta20:
0x0568	0x0012      	RETURN      0
; end of _ContadorAutomaticoHasta20
_CorrimientoDeLedsDeIzquierdaADerecha:
;MyProject.c,248 :: 		void CorrimientoDeLedsDeIzquierdaADerecha()
;MyProject.c,251 :: 		externa = 0;
0x056A	0x6A19      	CLRF        _externa 
0x056C	0x6A1A      	CLRF        _externa+1 
;MyProject.c,252 :: 		SPP0_bit = 1;
0x056E	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,253 :: 		continuar = 0;
0x0570	0x6A1D      	CLRF        _continuar 
0x0572	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,255 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0574	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,256 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha94:
0x0576	0x0E00      	MOVLW       0
0x0578	0x181E      	XORWF       _continuar+1, 0 
0x057A	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha213
0x057C	0x0E00      	MOVLW       0
0x057E	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha213:
0x0580	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha95
0x0582	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha94
L_CorrimientoDeLedsDeIzquierdaADerecha95:
;MyProject.c,258 :: 		SPP0_bit = 0;
0x0584	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;MyProject.c,259 :: 		SPP1_bit = 1;
0x0586	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,260 :: 		continuar = 0;
0x0588	0x6A1D      	CLRF        _continuar 
0x058A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,262 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x058C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,263 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha96:
0x058E	0x0E00      	MOVLW       0
0x0590	0x181E      	XORWF       _continuar+1, 0 
0x0592	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha214
0x0594	0x0E00      	MOVLW       0
0x0596	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha214:
0x0598	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha97
0x059A	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha96
L_CorrimientoDeLedsDeIzquierdaADerecha97:
;MyProject.c,265 :: 		SPP1_bit = 0;
0x059C	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,266 :: 		SPP2_bit = 1;
0x059E	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,267 :: 		continuar = 0;
0x05A0	0x6A1D      	CLRF        _continuar 
0x05A2	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,269 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05A4	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,270 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha98:
0x05A6	0x0E00      	MOVLW       0
0x05A8	0x181E      	XORWF       _continuar+1, 0 
0x05AA	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha215
0x05AC	0x0E00      	MOVLW       0
0x05AE	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha215:
0x05B0	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha99
0x05B2	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha98
L_CorrimientoDeLedsDeIzquierdaADerecha99:
;MyProject.c,272 :: 		SPP2_bit = 0;
0x05B4	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,273 :: 		SPP3_bit = 1;
0x05B6	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,274 :: 		continuar = 0;
0x05B8	0x6A1D      	CLRF        _continuar 
0x05BA	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,276 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05BC	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,277 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha100:
0x05BE	0x0E00      	MOVLW       0
0x05C0	0x181E      	XORWF       _continuar+1, 0 
0x05C2	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha216
0x05C4	0x0E00      	MOVLW       0
0x05C6	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha216:
0x05C8	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha101
0x05CA	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha100
L_CorrimientoDeLedsDeIzquierdaADerecha101:
;MyProject.c,279 :: 		SPP3_bit = 0;
0x05CC	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,280 :: 		SPP4_bit = 1;
0x05CE	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,281 :: 		continuar = 0;
0x05D0	0x6A1D      	CLRF        _continuar 
0x05D2	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,283 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05D4	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,284 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha102:
0x05D6	0x0E00      	MOVLW       0
0x05D8	0x181E      	XORWF       _continuar+1, 0 
0x05DA	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha217
0x05DC	0x0E00      	MOVLW       0
0x05DE	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha217:
0x05E0	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha103
0x05E2	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha102
L_CorrimientoDeLedsDeIzquierdaADerecha103:
;MyProject.c,286 :: 		SPP4_bit = 0;
0x05E4	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,287 :: 		SPP5_bit = 1;
0x05E6	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,288 :: 		continuar = 0;
0x05E8	0x6A1D      	CLRF        _continuar 
0x05EA	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,290 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05EC	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,291 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha104:
0x05EE	0x0E00      	MOVLW       0
0x05F0	0x181E      	XORWF       _continuar+1, 0 
0x05F2	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha218
0x05F4	0x0E00      	MOVLW       0
0x05F6	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha218:
0x05F8	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha105
0x05FA	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha104
L_CorrimientoDeLedsDeIzquierdaADerecha105:
;MyProject.c,293 :: 		SPP5_bit = 0;
0x05FC	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,294 :: 		SPP6_bit = 1;
0x05FE	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,295 :: 		continuar = 0;
0x0600	0x6A1D      	CLRF        _continuar 
0x0602	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,297 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0604	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,298 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha106:
0x0606	0x0E00      	MOVLW       0
0x0608	0x181E      	XORWF       _continuar+1, 0 
0x060A	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha219
0x060C	0x0E00      	MOVLW       0
0x060E	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha219:
0x0610	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha107
0x0612	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha106
L_CorrimientoDeLedsDeIzquierdaADerecha107:
;MyProject.c,300 :: 		SPP6_bit = 0;
0x0614	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,301 :: 		SPP7_bit = 1;
0x0616	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,302 :: 		continuar = 0;
0x0618	0x6A1D      	CLRF        _continuar 
0x061A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,304 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x061C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,305 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha108:
0x061E	0x0E00      	MOVLW       0
0x0620	0x181E      	XORWF       _continuar+1, 0 
0x0622	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha220
0x0624	0x0E00      	MOVLW       0
0x0626	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha220:
0x0628	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha109
0x062A	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha108
L_CorrimientoDeLedsDeIzquierdaADerecha109:
;MyProject.c,307 :: 		SPP7_bit = 0;
0x062C	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;MyProject.c,308 :: 		SPP6_bit = 1;
0x062E	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,309 :: 		continuar = 0;
0x0630	0x6A1D      	CLRF        _continuar 
0x0632	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,311 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0634	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,312 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha110:
0x0636	0x0E00      	MOVLW       0
0x0638	0x181E      	XORWF       _continuar+1, 0 
0x063A	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha221
0x063C	0x0E00      	MOVLW       0
0x063E	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha221:
0x0640	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha111
0x0642	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha110
L_CorrimientoDeLedsDeIzquierdaADerecha111:
;MyProject.c,315 :: 		SPP6_bit = 0;
0x0644	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;MyProject.c,316 :: 		SPP5_bit = 1;
0x0646	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,317 :: 		continuar = 0;
0x0648	0x6A1D      	CLRF        _continuar 
0x064A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,319 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x064C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,320 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha112:
0x064E	0x0E00      	MOVLW       0
0x0650	0x181E      	XORWF       _continuar+1, 0 
0x0652	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha222
0x0654	0x0E00      	MOVLW       0
0x0656	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha222:
0x0658	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha113
0x065A	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha112
L_CorrimientoDeLedsDeIzquierdaADerecha113:
;MyProject.c,322 :: 		SPP5_bit = 0;
0x065C	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;MyProject.c,323 :: 		SPP4_bit = 1;
0x065E	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,324 :: 		continuar = 0;
0x0660	0x6A1D      	CLRF        _continuar 
0x0662	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,326 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0664	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,327 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha114:
0x0666	0x0E00      	MOVLW       0
0x0668	0x181E      	XORWF       _continuar+1, 0 
0x066A	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha223
0x066C	0x0E00      	MOVLW       0
0x066E	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha223:
0x0670	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha115
0x0672	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha114
L_CorrimientoDeLedsDeIzquierdaADerecha115:
;MyProject.c,329 :: 		SPP4_bit = 0;
0x0674	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;MyProject.c,330 :: 		SPP3_bit = 1;
0x0676	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,331 :: 		continuar = 0;
0x0678	0x6A1D      	CLRF        _continuar 
0x067A	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,333 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x067C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,334 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha116:
0x067E	0x0E00      	MOVLW       0
0x0680	0x181E      	XORWF       _continuar+1, 0 
0x0682	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha224
0x0684	0x0E00      	MOVLW       0
0x0686	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha224:
0x0688	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha117
0x068A	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha116
L_CorrimientoDeLedsDeIzquierdaADerecha117:
;MyProject.c,336 :: 		SPP3_bit = 0;
0x068C	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;MyProject.c,337 :: 		SPP2_bit = 1;
0x068E	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,338 :: 		continuar = 0;
0x0690	0x6A1D      	CLRF        _continuar 
0x0692	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,340 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0694	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,341 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha118:
0x0696	0x0E00      	MOVLW       0
0x0698	0x181E      	XORWF       _continuar+1, 0 
0x069A	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha225
0x069C	0x0E00      	MOVLW       0
0x069E	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha225:
0x06A0	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha119
0x06A2	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha118
L_CorrimientoDeLedsDeIzquierdaADerecha119:
;MyProject.c,343 :: 		SPP2_bit = 0;
0x06A4	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;MyProject.c,344 :: 		SPP1_bit = 1;
0x06A6	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,345 :: 		continuar = 0;
0x06A8	0x6A1D      	CLRF        _continuar 
0x06AA	0x6A1E      	CLRF        _continuar+1 
;MyProject.c,347 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x06AC	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,348 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha120:
0x06AE	0x0E00      	MOVLW       0
0x06B0	0x181E      	XORWF       _continuar+1, 0 
0x06B2	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha226
0x06B4	0x0E00      	MOVLW       0
0x06B6	0x181D      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha226:
0x06B8	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha121
0x06BA	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha120
L_CorrimientoDeLedsDeIzquierdaADerecha121:
;MyProject.c,350 :: 		SPP1_bit = 0;
0x06BC	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;MyProject.c,351 :: 		}
L_end_CorrimientoDeLedsDeIzquierdaADerecha:
0x06BE	0x0012      	RETURN      0
; end of _CorrimientoDeLedsDeIzquierdaADerecha
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x06C0	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x06C2	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x06C6	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x06C8	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x06CA	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x06CC	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x06CE	0x0012      	RETURN      0
; end of ___CC2DW
_configurar:
;MyProject.c,8 :: 		void configurar()
;MyProject.c,10 :: 		TRISD =   0;                          // Colocamos todo el puerto D de salida
0x06D0	0x6A95      	CLRF        TRISD 
;MyProject.c,11 :: 		PORTD =   0;                          // Inicializamos el puerto D
0x06D2	0x6A83      	CLRF        PORTD 
;MyProject.c,13 :: 		TRISA =   0xFF;                       // Colocamos todo el puerto A como entrada
0x06D4	0x0EFF      	MOVLW       255
0x06D6	0x6E92      	MOVWF       TRISA 
;MyProject.c,14 :: 		PORTA =   0;                          // Inicializamos el puerto A
0x06D8	0x6A80      	CLRF        PORTA 
;MyProject.c,16 :: 		INTCON =  0xC0;                       // Habilitamos todas las interrupciones unmasked en el bit 7 y las interrupciones unmasked perifericas en el bit 6
0x06DA	0x0EC0      	MOVLW       192
0x06DC	0x6EF2      	MOVWF       INTCON 
;MyProject.c,19 :: 		T0CON = 0x68;                         // Encendemos el bit 6, 5 y 3 en el TMR0. 6 = Contador de 8 bits. 5 = Se ubica externamente en el pin T0CKI. 3 = NO usa valores de prescala
0x06DE	0x0E68      	MOVLW       104
0x06E0	0x6ED5      	MOVWF       T0CON 
;MyProject.c,20 :: 		TMR0L = 0xFF;                         // Colocamos el timer con un valor inicial de 255 para que asi solo cuente 1 hasta llegar al desbordamiento en 256
0x06E2	0x0EFF      	MOVLW       255
0x06E4	0x6ED6      	MOVWF       TMR0L 
;MyProject.c,21 :: 		TMR0IE_bit = 1;                       // Activamos la opcion de que se sea permitido llamar la interrupcion por overflow
0x06E6	0x8AF2      	BSF         TMR0IE_bit, BitPos(TMR0IE_bit+0) 
;MyProject.c,22 :: 		TMR0ON_bit = 1;                       // Encendemos el timer
0x06E8	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;MyProject.c,25 :: 		TMR1H = 0x0A;                        // Valor inicial de TMR1
0x06EA	0x0E0A      	MOVLW       10
0x06EC	0x6ECF      	MOVWF       TMR1H 
;MyProject.c,26 :: 		TMR1L = 0xFF;
0x06EE	0x0EFF      	MOVLW       255
0x06F0	0x6ECE      	MOVWF       TMR1L 
;MyProject.c,27 :: 		TMR1CS_bit = 0;                      // Utilizamos el contador interno y no uno externo
0x06F2	0x92CD      	BCF         TMR1CS_bit, BitPos(TMR1CS_bit+0) 
;MyProject.c,28 :: 		T1CKPS1_bit = T1CKPS0_bit = 1;       // Asignamos una escala de 1:8 poniendo como 1 el bit 5 y 4 de T1CON
0x06F4	0x88CD      	BSF         T1CKPS0_bit, BitPos(T1CKPS0_bit+0) 
0x06F6	0xB8CD      	BTFSC       T1CKPS0_bit, BitPos(T1CKPS0_bit+0) 
0x06F8	0xD002      	BRA         L__configurar157
0x06FA	0x9ACD      	BCF         T1CKPS1_bit, BitPos(T1CKPS1_bit+0) 
0x06FC	0xD001      	BRA         L__configurar158
L__configurar157:
0x06FE	0x8ACD      	BSF         T1CKPS1_bit, BitPos(T1CKPS1_bit+0) 
L__configurar158:
;MyProject.c,29 :: 		TMR1IE_bit = 1;                      // Habilitamos la interrupcion por OVERFLOW del TMR1
0x0700	0x809D      	BSF         TMR1IE_bit, BitPos(TMR1IE_bit+0) 
;MyProject.c,30 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0702	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,31 :: 		}
L_end_configurar:
0x0704	0x0012      	RETURN      0
; end of _configurar
_ElegirProceso:
;MyProject.c,437 :: 		void ElegirProceso()
;MyProject.c,439 :: 		switch (proceso)
0x0706	0xD012      	BRA         L_ElegirProceso143
;MyProject.c,442 :: 		case 1:
L_ElegirProceso145:
;MyProject.c,443 :: 		EncenderApagar();
0x0708	0xDE90      	RCALL       _EncenderApagar
;MyProject.c,444 :: 		break;
0x070A	0xD034      	BRA         L_ElegirProceso144
;MyProject.c,446 :: 		case 2:
L_ElegirProceso146:
;MyProject.c,447 :: 		ApagarLeds();
0x070C	0xDEA7      	RCALL       _ApagarLeds
;MyProject.c,448 :: 		BasculacionConIncremento();
0x070E	0xDC9E      	RCALL       _BasculacionConIncremento
;MyProject.c,449 :: 		break;
0x0710	0xD031      	BRA         L_ElegirProceso144
;MyProject.c,451 :: 		case 3:
L_ElegirProceso147:
;MyProject.c,452 :: 		ApagarLeds();
0x0712	0xDEA4      	RCALL       _ApagarLeds
;MyProject.c,453 :: 		CorrimientoDeLedsDeIzquierdaADerecha();
0x0714	0xDF2A      	RCALL       _CorrimientoDeLedsDeIzquierdaADerecha
;MyProject.c,454 :: 		break;
0x0716	0xD02E      	BRA         L_ElegirProceso144
;MyProject.c,456 :: 		case 4:
L_ElegirProceso148:
;MyProject.c,457 :: 		ApagarLeds();
0x0718	0xDEA1      	RCALL       _ApagarLeds
;MyProject.c,458 :: 		ContadorAutomaticoHasta20();
0x071A	0xDF0A      	RCALL       _ContadorAutomaticoHasta20
;MyProject.c,459 :: 		break;
0x071C	0xD02B      	BRA         L_ElegirProceso144
;MyProject.c,461 :: 		case 5:
L_ElegirProceso149:
;MyProject.c,462 :: 		ApagarLeds();
0x071E	0xDE9E      	RCALL       _ApagarLeds
;MyProject.c,463 :: 		CorrimientoImparRegresoPar();
0x0720	0xDEA6      	RCALL       _CorrimientoImparRegresoPar
;MyProject.c,464 :: 		break;
0x0722	0xD028      	BRA         L_ElegirProceso144
;MyProject.c,466 :: 		case 6:
L_ElegirProceso150:
;MyProject.c,467 :: 		ApagarLeds();
0x0724	0xDE9B      	RCALL       _ApagarLeds
;MyProject.c,468 :: 		proceso = 0;
0x0726	0x6A1B      	CLRF        _proceso 
0x0728	0x6A1C      	CLRF        _proceso+1 
;MyProject.c,469 :: 		break;
0x072A	0xD024      	BRA         L_ElegirProceso144
;MyProject.c,470 :: 		}
L_ElegirProceso143:
0x072C	0x0E00      	MOVLW       0
0x072E	0x181C      	XORWF       _proceso+1, 0 
0x0730	0xE102      	BNZ         L__ElegirProceso241
0x0732	0x0E01      	MOVLW       1
0x0734	0x181B      	XORWF       _proceso, 0 
L__ElegirProceso241:
0x0736	0xE0E8      	BZ          L_ElegirProceso145
0x0738	0x0E00      	MOVLW       0
0x073A	0x181C      	XORWF       _proceso+1, 0 
0x073C	0xE102      	BNZ         L__ElegirProceso242
0x073E	0x0E02      	MOVLW       2
0x0740	0x181B      	XORWF       _proceso, 0 
L__ElegirProceso242:
0x0742	0xE0E4      	BZ          L_ElegirProceso146
0x0744	0x0E00      	MOVLW       0
0x0746	0x181C      	XORWF       _proceso+1, 0 
0x0748	0xE102      	BNZ         L__ElegirProceso243
0x074A	0x0E03      	MOVLW       3
0x074C	0x181B      	XORWF       _proceso, 0 
L__ElegirProceso243:
0x074E	0xE0E1      	BZ          L_ElegirProceso147
0x0750	0x0E00      	MOVLW       0
0x0752	0x181C      	XORWF       _proceso+1, 0 
0x0754	0xE102      	BNZ         L__ElegirProceso244
0x0756	0x0E04      	MOVLW       4
0x0758	0x181B      	XORWF       _proceso, 0 
L__ElegirProceso244:
0x075A	0xE0DE      	BZ          L_ElegirProceso148
0x075C	0x0E00      	MOVLW       0
0x075E	0x181C      	XORWF       _proceso+1, 0 
0x0760	0xE102      	BNZ         L__ElegirProceso245
0x0762	0x0E05      	MOVLW       5
0x0764	0x181B      	XORWF       _proceso, 0 
L__ElegirProceso245:
0x0766	0xE0DB      	BZ          L_ElegirProceso149
0x0768	0x0E00      	MOVLW       0
0x076A	0x181C      	XORWF       _proceso+1, 0 
0x076C	0xE102      	BNZ         L__ElegirProceso246
0x076E	0x0E06      	MOVLW       6
0x0770	0x181B      	XORWF       _proceso, 0 
L__ElegirProceso246:
0x0772	0xE0D8      	BZ          L_ElegirProceso150
L_ElegirProceso144:
;MyProject.c,471 :: 		}
L_end_ElegirProceso:
0x0774	0x0012      	RETURN      0
; end of _ElegirProceso
_main:
0x0776	0x6A17      	CLRF        _repeticiones 
0x0778	0x6A18      	CLRF        24 
0x077A	0x6A19      	CLRF        _externa 
0x077C	0x6A1A      	CLRF        26 
0x077E	0x6A1B      	CLRF        _proceso 
0x0780	0x6A1C      	CLRF        28 
0x0782	0x6A1D      	CLRF        _continuar 
0x0784	0x6A1E      	CLRF        30 
;MyProject.c,500 :: 		void main() {
;MyProject.c,501 :: 		configurar();
0x0786	0xDFA4      	RCALL       _configurar
;MyProject.c,502 :: 		while(1)
L_main154:
;MyProject.c,504 :: 		ElegirProceso();
0x0788	0xDFBE      	RCALL       _ElegirProceso
;MyProject.c,505 :: 		}
0x078A	0xD7FE      	BRA         L_main154
;MyProject.c,506 :: 		}
L_end_main:
0x078C	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [68]    _interrupt
0x004C     [990]    _BasculacionConIncremento
0x042A      [50]    _EncenderApagar
0x045C      [18]    _ApagarLeds
0x046E     [194]    _CorrimientoImparRegresoPar
0x0530      [58]    _ContadorAutomaticoHasta20
0x056A     [342]    _CorrimientoDeLedsDeIzquierdaADerecha
0x06C0      [16]    ___CC2DW
0x06D0      [54]    _configurar
0x0706     [112]    _ElegirProceso
0x0776      [24]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    R0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [2]    ContadorAutomaticoHasta20_numero_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    R1
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0002       [1]    R2
0x0002       [2]    memset_pp_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    __Lib_USB_genHID_memset_usb_pp_L0
0x0002       [2]    __Lib_USB_genHID_memset_usb_int_pp_L0
0x0002       [2]    memchr_s_L0
0x0002       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_byteToRead_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    __Lib_USB_genHID_USB_CtrlTrf_Tx_Service_byteToSend_L0
0x0003       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_i_L0
0x0003       [1]    R3
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    memmove_tt_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_Int_handle_L0
0x0004       [1]    __Lib_USB_genHID_GetMaxIndexInDevDsc_index_L0
0x0004       [1]    R4
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_handle_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    __Lib_USB_genHID_USB_Std_Feature_Req_Handler_p_L0
0x0004       [2]    __Lib_USB_genHID_USB_Get_Status_Handler_p_L2
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    R5
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    __Lib_USB_genHID_USB_Configure_Endpoint_handle_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [2]    __Lib_USB_genHID_GetMaxIndexInConfigDsc_totalLen_L0
0x0006       [1]    R6
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0008       [3]    __Lib_USB_genHID_GetMaxIndexInConfigDsc_ptr_L0
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0017       [2]    _repeticiones
0x0019       [2]    _externa
0x001B       [2]    _proceso
0x001D       [2]    _continuar
0x0F80       [1]    PORTA
0x0F83       [0]    SPP4_bit
0x0F83       [0]    SPP5_bit
0x0F83       [0]    SPP6_bit
0x0F83       [0]    SPP7_bit
0x0F83       [0]    SPP3_bit
0x0F83       [0]    SPP1_bit
0x0F83       [0]    SPP0_bit
0x0F83       [1]    PORTD
0x0F83       [0]    RD0_bit
0x0F83       [0]    SPP2_bit
0x0F92       [1]    TRISA
0x0F95       [1]    TRISD
0x0F9D       [0]    TMR1IE_bit
0x0F9E       [0]    TMR1IF_bit
0x0FCD       [0]    T1CKPS1_bit
0x0FCD       [0]    TMR1CS_bit
0x0FCD       [0]    TMR1ON_bit
0x0FCD       [0]    T1CKPS0_bit
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD5       [1]    T0CON
0x0FD5       [0]    TMR0ON_bit
0x0FD6       [1]    TMR0L
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [0]    TMR0IE_bit
0x0FF2       [0]    TMR0IF_bit
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Label List: ** 
//----------------------------------------------
  L_EncenderApagar0
  L_EncenderApagar1
  L_EncenderApagar2
  L_EncenderApagar3
  L_BasculacionConIncremento4
  L_BasculacionConIncremento5
  L_BasculacionConIncremento6
  L_BasculacionConIncremento7
  L_BasculacionConIncremento8
  L_BasculacionConIncremento9
  L_BasculacionConIncremento10
  L_BasculacionConIncremento11
  L_BasculacionConIncremento12
  L_BasculacionConIncremento13
  L_BasculacionConIncremento14
  L_BasculacionConIncremento15
  L_BasculacionConIncremento16
  L_BasculacionConIncremento17
  L_BasculacionConIncremento18
  L_BasculacionConIncremento19
  L_BasculacionConIncremento20
  L_BasculacionConIncremento21
  L_BasculacionConIncremento22
  L_BasculacionConIncremento23
  L_BasculacionConIncremento24
  L_BasculacionConIncremento25
  L_BasculacionConIncremento26
  L_BasculacionConIncremento27
  L_BasculacionConIncremento28
  L_BasculacionConIncremento29
  L_BasculacionConIncremento30
  L_BasculacionConIncremento31
  L_BasculacionConIncremento32
  L_BasculacionConIncremento33
  L_BasculacionConIncremento34
  L_BasculacionConIncremento35
  L_BasculacionConIncremento36
  L_BasculacionConIncremento37
  L_BasculacionConIncremento38
  L_BasculacionConIncremento39
  L_BasculacionConIncremento40
  L_BasculacionConIncremento41
  L_BasculacionConIncremento42
  L_BasculacionConIncremento43
  L_BasculacionConIncremento44
  L_BasculacionConIncremento45
  L_BasculacionConIncremento46
  L_BasculacionConIncremento47
  L_BasculacionConIncremento48
  L_BasculacionConIncremento49
  L_BasculacionConIncremento50
  L_BasculacionConIncremento51
  L_BasculacionConIncremento52
  L_BasculacionConIncremento53
  L_BasculacionConIncremento54
  L_BasculacionConIncremento55
  L_BasculacionConIncremento56
  L_BasculacionConIncremento57
  L_BasculacionConIncremento58
  L_BasculacionConIncremento59
  L_BasculacionConIncremento60
  L_BasculacionConIncremento61
  L_BasculacionConIncremento62
  L_BasculacionConIncremento63
  L_BasculacionConIncremento64
  L_BasculacionConIncremento65
  L_BasculacionConIncremento66
  L_BasculacionConIncremento67
  L_BasculacionConIncremento68
  L_BasculacionConIncremento69
  L_BasculacionConIncremento70
  L_BasculacionConIncremento71
  L_BasculacionConIncremento72
  L_BasculacionConIncremento73
  L_BasculacionConIncremento74
  L_BasculacionConIncremento75
  L_BasculacionConIncremento76
  L_BasculacionConIncremento77
  L_BasculacionConIncremento78
  L_BasculacionConIncremento79
  L_BasculacionConIncremento80
  L_BasculacionConIncremento81
  L_BasculacionConIncremento82
  L_BasculacionConIncremento83
  L_BasculacionConIncremento84
  L_BasculacionConIncremento85
  L_BasculacionConIncremento86
  L_BasculacionConIncremento87
  L_BasculacionConIncremento88
  L_BasculacionConIncremento89
  L_BasculacionConIncremento90
  L_BasculacionConIncremento91
  L_BasculacionConIncremento92
  L_BasculacionConIncremento93
  L_CorrimientoDeLedsDeIzquierdaADerecha94
  L_CorrimientoDeLedsDeIzquierdaADerecha95
  L_CorrimientoDeLedsDeIzquierdaADerecha96
  L_CorrimientoDeLedsDeIzquierdaADerecha97
  L_CorrimientoDeLedsDeIzquierdaADerecha98
  L_CorrimientoDeLedsDeIzquierdaADerecha99
  L_CorrimientoDeLedsDeIzquierdaADerecha100
  L_CorrimientoDeLedsDeIzquierdaADerecha101
  L_CorrimientoDeLedsDeIzquierdaADerecha102
  L_CorrimientoDeLedsDeIzquierdaADerecha103
  L_CorrimientoDeLedsDeIzquierdaADerecha104
  L_CorrimientoDeLedsDeIzquierdaADerecha105
  L_CorrimientoDeLedsDeIzquierdaADerecha106
  L_CorrimientoDeLedsDeIzquierdaADerecha107
  L_CorrimientoDeLedsDeIzquierdaADerecha108
  L_CorrimientoDeLedsDeIzquierdaADerecha109
  L_CorrimientoDeLedsDeIzquierdaADerecha110
  L_CorrimientoDeLedsDeIzquierdaADerecha111
  L_CorrimientoDeLedsDeIzquierdaADerecha112
  L_CorrimientoDeLedsDeIzquierdaADerecha113
  L_CorrimientoDeLedsDeIzquierdaADerecha114
  L_CorrimientoDeLedsDeIzquierdaADerecha115
  L_CorrimientoDeLedsDeIzquierdaADerecha116
  L_CorrimientoDeLedsDeIzquierdaADerecha117
  L_CorrimientoDeLedsDeIzquierdaADerecha118
  L_CorrimientoDeLedsDeIzquierdaADerecha119
  L_CorrimientoDeLedsDeIzquierdaADerecha120
  L_CorrimientoDeLedsDeIzquierdaADerecha121
  L_ContadorAutomaticoHasta20122
  L_ContadorAutomaticoHasta20123
  L_ContadorAutomaticoHasta20124
  L_ContadorAutomaticoHasta20125
  L_ContadorAutomaticoHasta20126
  L_CorrimientoImparRegresoPar127
  L_CorrimientoImparRegresoPar128
  L_CorrimientoImparRegresoPar129
  L_CorrimientoImparRegresoPar130
  L_CorrimientoImparRegresoPar131
  L_CorrimientoImparRegresoPar132
  L_CorrimientoImparRegresoPar133
  L_CorrimientoImparRegresoPar134
  L_CorrimientoImparRegresoPar135
  L_CorrimientoImparRegresoPar136
  L_CorrimientoImparRegresoPar137
  L_CorrimientoImparRegresoPar138
  L_CorrimientoImparRegresoPar139
  L_CorrimientoImparRegresoPar140
  L_CorrimientoImparRegresoPar141
  L_CorrimientoImparRegresoPar142
  L_ElegirProceso143
  L_ElegirProceso144
  L_ElegirProceso145
  L_ElegirProceso146
  L_ElegirProceso147
  L_ElegirProceso148
  L_ElegirProceso149
  L_ElegirProceso150
  L_interrupt151
  L_interrupt152
  L_interrupt153
  L_main154
  L_main155
  L_end_configurar
  _configurar
  L__configurar157
  L__configurar158
  L_end_EncenderApagar
  _EncenderApagar
  L__EncenderApagar160
  L__EncenderApagar161
  L_end_BasculacionConIncremento
  _BasculacionConIncremento
  L__BasculacionConIncremento163
  L__BasculacionConIncremento164
  L__BasculacionConIncremento165
  L__BasculacionConIncremento166
  L__BasculacionConIncremento167
  L__BasculacionConIncremento168
  L__BasculacionConIncremento169
  L__BasculacionConIncremento170
  L__BasculacionConIncremento171
  L__BasculacionConIncremento172
  L__BasculacionConIncremento173
  L__BasculacionConIncremento174
  L__BasculacionConIncremento175
  L__BasculacionConIncremento176
  L__BasculacionConIncremento177
  L__BasculacionConIncremento178
  L__BasculacionConIncremento179
  L__BasculacionConIncremento180
  L__BasculacionConIncremento181
  L__BasculacionConIncremento182
  L__BasculacionConIncremento183
  L__BasculacionConIncremento184
  L__BasculacionConIncremento185
  L__BasculacionConIncremento186
  L__BasculacionConIncremento187
  L__BasculacionConIncremento188
  L__BasculacionConIncremento189
  L__BasculacionConIncremento190
  L__BasculacionConIncremento191
  L__BasculacionConIncremento192
  L__BasculacionConIncremento193
  L__BasculacionConIncremento194
  L__BasculacionConIncremento195
  L__BasculacionConIncremento196
  L__BasculacionConIncremento197
  L__BasculacionConIncremento198
  L__BasculacionConIncremento199
  L__BasculacionConIncremento200
  L__BasculacionConIncremento201
  L__BasculacionConIncremento202
  L__BasculacionConIncremento203
  L__BasculacionConIncremento204
  L__BasculacionConIncremento205
  L__BasculacionConIncremento206
  L__BasculacionConIncremento207
  L__BasculacionConIncremento208
  L__BasculacionConIncremento209
  L__BasculacionConIncremento210
  L__BasculacionConIncremento211
  L_end_CorrimientoDeLedsDeIzquierdaADerecha
  _CorrimientoDeLedsDeIzquierdaADerecha
  L__CorrimientoDeLedsDeIzquierdaADerecha213
  L__CorrimientoDeLedsDeIzquierdaADerecha214
  L__CorrimientoDeLedsDeIzquierdaADerecha215
  L__CorrimientoDeLedsDeIzquierdaADerecha216
  L__CorrimientoDeLedsDeIzquierdaADerecha217
  L__CorrimientoDeLedsDeIzquierdaADerecha218
  L__CorrimientoDeLedsDeIzquierdaADerecha219
  L__CorrimientoDeLedsDeIzquierdaADerecha220
  L__CorrimientoDeLedsDeIzquierdaADerecha221
  L__CorrimientoDeLedsDeIzquierdaADerecha222
  L__CorrimientoDeLedsDeIzquierdaADerecha223
  L__CorrimientoDeLedsDeIzquierdaADerecha224
  L__CorrimientoDeLedsDeIzquierdaADerecha225
  L__CorrimientoDeLedsDeIzquierdaADerecha226
  L_end_ContadorAutomaticoHasta20
  _ContadorAutomaticoHasta20
  L__ContadorAutomaticoHasta20228
  L__ContadorAutomaticoHasta20229
  L_end_CorrimientoImparRegresoPar
  _CorrimientoImparRegresoPar
  L__CorrimientoImparRegresoPar231
  L__CorrimientoImparRegresoPar232
  L__CorrimientoImparRegresoPar233
  L__CorrimientoImparRegresoPar234
  L__CorrimientoImparRegresoPar235
  L__CorrimientoImparRegresoPar236
  L__CorrimientoImparRegresoPar237
  L__CorrimientoImparRegresoPar238
  L_end_ApagarLeds
  _ApagarLeds
  L_end_ElegirProceso
  _ElegirProceso
  L__ElegirProceso241
  L__ElegirProceso242
  L__ElegirProceso243
  L__ElegirProceso244
  L__ElegirProceso245
  L__ElegirProceso246
  L_end_interrupt
  _interrupt
  L__interrupt248
  L_end_main
  _main
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_EncenderApagar0
  L_EncenderApagar1
  L_EncenderApagar2
  L_EncenderApagar3
  L_BasculacionConIncremento4
  L_BasculacionConIncremento5
  L_BasculacionConIncremento6
  L_BasculacionConIncremento7
  L_BasculacionConIncremento8
  L_BasculacionConIncremento9
  L_BasculacionConIncremento10
  L_BasculacionConIncremento11
  L_BasculacionConIncremento12
  L_BasculacionConIncremento13
  L_BasculacionConIncremento14
  L_BasculacionConIncremento15
  L_BasculacionConIncremento16
  L_BasculacionConIncremento17
  L_BasculacionConIncremento18
  L_BasculacionConIncremento19
  L_BasculacionConIncremento20
  L_BasculacionConIncremento21
  L_BasculacionConIncremento22
  L_BasculacionConIncremento23
  L_BasculacionConIncremento24
  L_BasculacionConIncremento25
  L_BasculacionConIncremento26
  L_BasculacionConIncremento27
  L_BasculacionConIncremento28
  L_BasculacionConIncremento29
  L_BasculacionConIncremento30
  L_BasculacionConIncremento31
  L_BasculacionConIncremento32
  L_BasculacionConIncremento33
  L_BasculacionConIncremento34
  L_BasculacionConIncremento35
  L_BasculacionConIncremento36
  L_BasculacionConIncremento37
  L_BasculacionConIncremento38
  L_BasculacionConIncremento39
  L_BasculacionConIncremento40
  L_BasculacionConIncremento41
  L_BasculacionConIncremento42
  L_BasculacionConIncremento43
  L_BasculacionConIncremento44
  L_BasculacionConIncremento45
  L_BasculacionConIncremento46
  L_BasculacionConIncremento47
  L_BasculacionConIncremento48
  L_BasculacionConIncremento49
  L_BasculacionConIncremento50
  L_BasculacionConIncremento51
  L_BasculacionConIncremento52
  L_BasculacionConIncremento53
  L_BasculacionConIncremento54
  L_BasculacionConIncremento55
  L_BasculacionConIncremento56
  L_BasculacionConIncremento57
  L_BasculacionConIncremento58
  L_BasculacionConIncremento59
  L_BasculacionConIncremento60
  L_BasculacionConIncremento61
  L_BasculacionConIncremento62
  L_BasculacionConIncremento63
  L_BasculacionConIncremento64
  L_BasculacionConIncremento65
  L_BasculacionConIncremento66
  L_BasculacionConIncremento67
  L_BasculacionConIncremento68
  L_BasculacionConIncremento69
  L_BasculacionConIncremento70
  L_BasculacionConIncremento71
  L_BasculacionConIncremento72
  L_BasculacionConIncremento73
  L_BasculacionConIncremento74
  L_BasculacionConIncremento75
  L_BasculacionConIncremento76
  L_BasculacionConIncremento77
  L_BasculacionConIncremento78
  L_BasculacionConIncremento79
  L_BasculacionConIncremento80
  L_BasculacionConIncremento81
  L_BasculacionConIncremento82
  L_BasculacionConIncremento83
  L_BasculacionConIncremento84
  L_BasculacionConIncremento85
  L_BasculacionConIncremento86
  L_BasculacionConIncremento87
  L_BasculacionConIncremento88
  L_BasculacionConIncremento89
  L_BasculacionConIncremento90
  L_BasculacionConIncremento91
  L_BasculacionConIncremento92
  L_BasculacionConIncremento93
  L_CorrimientoDeLedsDeIzquierdaADerecha94
  L_CorrimientoDeLedsDeIzquierdaADerecha95
  L_CorrimientoDeLedsDeIzquierdaADerecha96
  L_CorrimientoDeLedsDeIzquierdaADerecha97
  L_CorrimientoDeLedsDeIzquierdaADerecha98
  L_CorrimientoDeLedsDeIzquierdaADerecha99
  L_CorrimientoDeLedsDeIzquierdaADerecha100
  L_CorrimientoDeLedsDeIzquierdaADerecha101
  L_CorrimientoDeLedsDeIzquierdaADerecha102
  L_CorrimientoDeLedsDeIzquierdaADerecha103
  L_CorrimientoDeLedsDeIzquierdaADerecha104
  L_CorrimientoDeLedsDeIzquierdaADerecha105
  L_CorrimientoDeLedsDeIzquierdaADerecha106
  L_CorrimientoDeLedsDeIzquierdaADerecha107
  L_CorrimientoDeLedsDeIzquierdaADerecha108
  L_CorrimientoDeLedsDeIzquierdaADerecha109
  L_CorrimientoDeLedsDeIzquierdaADerecha110
  L_CorrimientoDeLedsDeIzquierdaADerecha111
  L_CorrimientoDeLedsDeIzquierdaADerecha112
  L_CorrimientoDeLedsDeIzquierdaADerecha113
  L_CorrimientoDeLedsDeIzquierdaADerecha114
  L_CorrimientoDeLedsDeIzquierdaADerecha115
  L_CorrimientoDeLedsDeIzquierdaADerecha116
  L_CorrimientoDeLedsDeIzquierdaADerecha117
  L_CorrimientoDeLedsDeIzquierdaADerecha118
  L_CorrimientoDeLedsDeIzquierdaADerecha119
  L_CorrimientoDeLedsDeIzquierdaADerecha120
  L_CorrimientoDeLedsDeIzquierdaADerecha121
  L_ContadorAutomaticoHasta20122
  L_ContadorAutomaticoHasta20123
  L_ContadorAutomaticoHasta20124
  L_ContadorAutomaticoHasta20125
  L_ContadorAutomaticoHasta20126
  L_CorrimientoImparRegresoPar127
  L_CorrimientoImparRegresoPar128
  L_CorrimientoImparRegresoPar129
  L_CorrimientoImparRegresoPar130
  L_CorrimientoImparRegresoPar131
  L_CorrimientoImparRegresoPar132
  L_CorrimientoImparRegresoPar133
  L_CorrimientoImparRegresoPar134
  L_CorrimientoImparRegresoPar135
  L_CorrimientoImparRegresoPar136
  L_CorrimientoImparRegresoPar137
  L_CorrimientoImparRegresoPar138
  L_CorrimientoImparRegresoPar139
  L_CorrimientoImparRegresoPar140
  L_CorrimientoImparRegresoPar141
  L_CorrimientoImparRegresoPar142
  L_ElegirProceso143
  L_ElegirProceso144
  L_ElegirProceso145
  L_ElegirProceso146
  L_ElegirProceso147
  L_ElegirProceso148
  L_ElegirProceso149
  L_ElegirProceso150
  L_interrupt151
  L_interrupt152
  L_interrupt153
  L_main154
  L_main155
  L_end_configurar
  _configurar
  L__configurar157
  L__configurar158
  L_end_EncenderApagar
  _EncenderApagar
  L__EncenderApagar160
  L__EncenderApagar161
  L_end_BasculacionConIncremento
  _BasculacionConIncremento
  L__BasculacionConIncremento163
  L__BasculacionConIncremento164
  L__BasculacionConIncremento165
  L__BasculacionConIncremento166
  L__BasculacionConIncremento167
  L__BasculacionConIncremento168
  L__BasculacionConIncremento169
  L__BasculacionConIncremento170
  L__BasculacionConIncremento171
  L__BasculacionConIncremento172
  L__BasculacionConIncremento173
  L__BasculacionConIncremento174
  L__BasculacionConIncremento175
  L__BasculacionConIncremento176
  L__BasculacionConIncremento177
  L__BasculacionConIncremento178
  L__BasculacionConIncremento179
  L__BasculacionConIncremento180
  L__BasculacionConIncremento181
  L__BasculacionConIncremento182
  L__BasculacionConIncremento183
  L__BasculacionConIncremento184
  L__BasculacionConIncremento185
  L__BasculacionConIncremento186
  L__BasculacionConIncremento187
  L__BasculacionConIncremento188
  L__BasculacionConIncremento189
  L__BasculacionConIncremento190
  L__BasculacionConIncremento191
  L__BasculacionConIncremento192
  L__BasculacionConIncremento193
  L__BasculacionConIncremento194
  L__BasculacionConIncremento195
  L__BasculacionConIncremento196
  L__BasculacionConIncremento197
  L__BasculacionConIncremento198
  L__BasculacionConIncremento199
  L__BasculacionConIncremento200
  L__BasculacionConIncremento201
  L__BasculacionConIncremento202
  L__BasculacionConIncremento203
  L__BasculacionConIncremento204
  L__BasculacionConIncremento205
  L__BasculacionConIncremento206
  L__BasculacionConIncremento207
  L__BasculacionConIncremento208
  L__BasculacionConIncremento209
  L__BasculacionConIncremento210
  L__BasculacionConIncremento211
  L_end_CorrimientoDeLedsDeIzquierdaADerecha
  _CorrimientoDeLedsDeIzquierdaADerecha
  L__CorrimientoDeLedsDeIzquierdaADerecha213
  L__CorrimientoDeLedsDeIzquierdaADerecha214
  L__CorrimientoDeLedsDeIzquierdaADerecha215
  L__CorrimientoDeLedsDeIzquierdaADerecha216
  L__CorrimientoDeLedsDeIzquierdaADerecha217
  L__CorrimientoDeLedsDeIzquierdaADerecha218
  L__CorrimientoDeLedsDeIzquierdaADerecha219
  L__CorrimientoDeLedsDeIzquierdaADerecha220
  L__CorrimientoDeLedsDeIzquierdaADerecha221
  L__CorrimientoDeLedsDeIzquierdaADerecha222
  L__CorrimientoDeLedsDeIzquierdaADerecha223
  L__CorrimientoDeLedsDeIzquierdaADerecha224
  L__CorrimientoDeLedsDeIzquierdaADerecha225
  L__CorrimientoDeLedsDeIzquierdaADerecha226
  L_end_ContadorAutomaticoHasta20
  _ContadorAutomaticoHasta20
  L__ContadorAutomaticoHasta20228
  L__ContadorAutomaticoHasta20229
  L_end_CorrimientoImparRegresoPar
  _CorrimientoImparRegresoPar
  L__CorrimientoImparRegresoPar231
  L__CorrimientoImparRegresoPar232
  L__CorrimientoImparRegresoPar233
  L__CorrimientoImparRegresoPar234
  L__CorrimientoImparRegresoPar235
  L__CorrimientoImparRegresoPar236
  L__CorrimientoImparRegresoPar237
  L__CorrimientoImparRegresoPar238
  L_end_ApagarLeds
  _ApagarLeds
  L_end_ElegirProceso
  _ElegirProceso
  L__ElegirProceso241
  L__ElegirProceso242
  L__ElegirProceso243
  L__ElegirProceso244
  L__ElegirProceso245
  L__ElegirProceso246
  L_end_interrupt
  _interrupt
  L__interrupt248
  L_end_main
  _main
